*******************************DAY-5******************************

MAGIC SQUARE PROBLEM:
def generate_magic_square(n):
    if n % 2 == 0:
        raise ValueError("Only odd-sized magic squares are supported")
    magic_square = [[0] * n for _ in range(n)]
    row, col = 0, n // 2
    num = 1
    while num <= n * n:
        magic_square[row][col] = num
        num += 1
        new_row, new_col = (row - 1) % n, (col + 1) % n
        if magic_square[new_row][new_col] != 0:
            row = (row + 1) % n
        else:
            row, col = new_row, new_col
    return magic_square
def print_magic_square(magic_square):
    for row in magic_square:3
    
        for num in row:
            print(num, end="\t")
        print()
if __name__ == "__main__":
    n = int(input("Enter the size of the magic square (odd number): "))
    if n % 2 == 0:
        print("Only odd-sized magic squares are supported")
    else:
        magic_square = generate_magic_square(n)
        print("Magic Square of size", n, "x", n, "is:")
        print_magic_square(magic_square)
==============================================================================
VALID PARENTHESIS:
1. Count is Even then push
2. Push into a stack:1. closing bracket should contain open bracket
                     2. We should pop if nay open bracket there
                     3. Add the open and close bracket
open_list = ["[","{","("]
close_list = ["]","}",")"]
def check(myStr):
	stack = []
	for i in myStr:
		if i in open_list:
			stack.append(i)
		elif i in close_list:
			pos = close_list.index(i)
			if ((len(stack) > 0) and
				(open_list[pos] == stack[len(stack)-1])):
				stack.pop()
			else:
				return "Unbalanced"
	if len(stack) == 0:
		return "Balanced"
	else:
		return "Unbalanced"

string = input("enter string")
print(string,"-", check(string))

===================================================================================
GENERATE PARENTHESIS:
def generate_parenthesis(n):
    def generate(partial, left, right, valid_combinations = []):

        if left > 0:
            generate(partial+'()', left - 1, right)

        if right > left:
            generate(partial+')', left, right - 1)

        if left == 0 and right == 0:
            valid_combinations.append(partial)
            
        return valid_combinations
    
    return generate(' ', n, n)

n = 3
result = generate_parenthesis(n)
print(result)
======================================================================================
