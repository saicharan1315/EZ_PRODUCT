********************************DAY-6********************************

Defination of Recursion 
Defination of Backtracking
Time complexity and space complexity
 
Play alternate that means there is in in the middle ambiguous in the sense there are 
two possibilities so we will try for the first possibility and we will come to know 
that there is an end it is not possible when at that time we came back we will get 
back and again we will follow the alternate approach this is what the back tracking 
approach but where exactly the code where you can find that code.
===============================================================================================
n Queen problem:
import psutil
import time


start_time = time.time()


before_memory = psutil.virtual_memory().used


def solve_n_queens(n):
    def is_safe(board, row, col):

        for i in range(col):
            if board[row][i] == 1:
                return False
            
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 1:
                return False
            

        for i, j in zip(range(row, n), range(col, -1, -1)):
            if board[1][j] == 1:
                return False
        
        return True
    
    def solve(board, col):
        if col >= n:
            solutions.append(["".join(["Q" if x == 1 else "." for x in row]) for row in board])
            return True
        
        for i in range(n):
            if is_safe(board, i, col):
                board[i][col] = 1
                solve(board, col + 1)
                board[i][col] = 0

    solutions = []
    board = [[0] * n for _ in range(n)]
    ====================================================================================================

SUBSET SUM OF THE GIVEN ARRAY ELEMENTS :
[6, 8, 9, 5, 4, 3, 26, 2]

SUM = 13
SUM = 28
SUM = 40

1. sum > target > min

def subset_sum(arr, n, target, current_subset=[]):
    if target == 0:
        print("Subset with the given sum:", current_subset)
        return

    if n == 0 and target != 0:
        return
    if arr[n - 1] > target:
        subset_sum(arr, n - 1, target, current_subset)
        return
    include_current = current_subset + [arr[n - 1]]
    subset_sum(arr, n - 1, target - arr[n - 1], include_current)
    subset_sum(arr, n - 1, target, current_subset)

arr = list(map(int, input("Enter the array elements separated by space: ").split(', ')))
target = int(input("Enter the target sum: "))
n = len(arr)
subset_sum(arr, n, target)
===========================================================================================
